setfpscap(165)
--// SetUps
local Stats = game:GetService('Stats')
local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')

local Nurysium_Util = loadstring(game:HttpGet('https://raw.githubusercontent.com/Pr34GcbhXftx678VuhN00PDr00bVtmn667ByVh/Lol-Main-Helper-Deffo-Not-Skidded-Open-Sourced-Skid-Grr/main/Nurysium_Helper'))()

local local_player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local nurysium_Data = nil
local hit_Sound = nil

local closest_Entity = nil
local parry_remote = nil

getgenv().aura_Enabled = false
getgenv().hit_sound_Enabled = false
getgenv().hit_effect_Enabled = false
getgenv().night_mode_Enabled = false
getgenv().trail_Enabled = false
getgenv().self_effect_Enabled = false
getgenv().kill_effect_Enabled = false
getgenv().shaders_effect_Enabled = false

local Services = {
    game:GetService('AdService'),
    game:GetService('SocialService')
}

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/flezzpe/Nurysium/main/nurysium_ui.lua"))()
task.wait(0.5)

library:init("SpeedX Test", game:GetService("UserInputService").TouchEnabled, game:GetService("CoreGui"))

library:create_section("Combat", 17440545793)
library:create_section("Misc", 17440868530)

--// Hit Sound
function initializate(dataFolder_name: string)
    local nurysium_Data = Instance.new('Folder', game:GetService('CoreGui'))
    nurysium_Data.Name = dataFolder_name

    hit_Sound = Instance.new('Sound', nurysium_Data)
    hit_Sound.SoundId = 'rbxassetid://8632670510'
    hit_Sound.Volume = 5
end

local function get_closest_entity(Object: Part)
    task.spawn(function()
        local closest
        local max_distance = math.huge

        for index, entity in workspace.Alive:GetChildren() do
            if entity.Name ~= Players.LocalPlayer.Name then
                local distance = (Object.Position - entity.HumanoidRootPart.Position).Magnitude

                if distance < max_distance then
                    closest_Entity = entity
                    max_distance = distance
                end

            end
        end

        return closest_Entity
    end)
end

--// Parry Remote
function resolve_parry_Remote()
    for _, value in Services do
        local temp_remote = value:FindFirstChildOfClass('RemoteEvent')

        if not temp_remote then
            continue
        end

        if not temp_remote.Name:find('\n') then
            continue
        end

        parry_remote = temp_remote
    end
end

local aura_table = {
    canParry = true,
    is_Spamming = false,

    parry_Range = 0,
    spam_Range = 0,  
    hit_Count = 0,

    hit_Time = tick(),
    ball_Warping = tick(),
    is_ball_Warping = false
}

ReplicatedStorage.Remotes.ParrySuccess.OnClientEvent:Connect(function()
    if getgenv().hit_sound_Enabled then
        hit_Sound:Play()
    end

    if getgenv().hit_effect_Enabled then
        local hit_effect = game:GetObjects("rbxassetid://17407244385")[1]

        hit_effect.Parent = Nurysium_Util.getBall()
        hit_effect:Emit(4)
        
        task.delay(5, function()
            hit_effect:Destroy()
        end)

    end
end)

ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function()
    aura_table.hit_Count += 1

    task.delay(0.15, function()
        aura_table.hit_Count -= 1
    end)
end)

workspace:WaitForChild("Balls").ChildRemoved:Connect(function(child)
    aura_table.hit_Count = 0
    aura_table.is_ball_Warping = false
    aura_table.is_Spamming = false
end)

library:create_toggle("Auto Parry", "Combat", function(toggled)
    resolve_parry_Remote()
    getgenv().aura_Enabled = toggled
end)

library:create_toggle("Hit Sound", "Combat", function(toggled)
  getgenv().hit_sound_Enabled = toggled
end)

library:create_toggle("Hit Effect", "Combat", function(toggled)
  getgenv().hit_effect_Enabled = toggled
end)

task.spawn(function()
    RunService.PreRender:Connect(function()
        if not getgenv().aura_Enabled then
            return
        end

        if closest_Entity then
            if workspace.Alive:FindFirstChild(closest_Entity.Name) and workspace.Alive:FindFirstChild(closest_Entity.Name).Humanoid.Health > 0 then
                if aura_table.is_Spamming then
                    if local_player:DistanceFromCharacter(closest_Entity.HumanoidRootPart.Position) <= aura_table.spam_Range then   

                        parry_remote:FireServer(
                            0.5,
                            CFrame.new(camera.CFrame.Position, Vector3.zero),
                            {[closest_Entity.Name] = closest_Entity.HumanoidRootPart.Position},
                            {closest_Entity.HumanoidRootPart.Position.X, closest_Entity.HumanoidRootPart.Position.Y},
                            false
                        )

                    end
                end
            end
        end
    end)

    RunService.PreRender:Connect(function()
        if not getgenv().aura_Enabled then
            return
        end

        local ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue() / 10
        local self = Nurysium_Util.getBall()

        if not self then
            return
        end

        self:GetAttributeChangedSignal('target'):Once(function()
            aura_table.canParry = true
        end)

        if self:GetAttribute('target') ~= local_player.Name or not aura_table.canParry then
            return
        end

        get_closest_entity(local_player.Character.PrimaryPart)

        local player_Position = local_player.Character.PrimaryPart.Position

        local ball_Position = self.Position
        local ball_Velocity = self.AssemblyLinearVelocity

        if self:FindFirstChild('zoomies') then
            ball_Velocity = self.zoomies.VectorVelocity
        end

        local ball_Direction = (local_player.Character.PrimaryPart.Position - ball_Position).Unit
        local ball_Distance = local_player:DistanceFromCharacter(ball_Position)
        local ball_Dot = ball_Direction:Dot(ball_Velocity.Unit)
        local ball_Speed = ball_Velocity.Magnitude
        local ball_speed_Limited = math.min(ball_Speed / 1000, 0.1)

        local ball_predicted_Distance = (ball_Distance - ping / 15.5) - (ball_Speed / 3.5)

        local target_Position = closest_Entity.HumanoidRootPart.Position
        local target_Distance = local_player:DistanceFromCharacter(target_Position)
        local target_distance_Limited = math.min(target_Distance / 10000, 0.1)
        local target_Direction = (local_player.Character.PrimaryPart.Position - closest_Entity.HumanoidRootPart.Position).Unit
        local target_Velocity = closest_Entity.HumanoidRootPart.AssemblyLinearVelocity
        local target_isMoving = target_Velocity.Magnitude > 0
        local target_Dot = target_isMoving and math.max(target_Direction:Dot(target_Velocity.Unit), 0)

        aura_table.spam_Range = math.max(ping / 10, 15) + ball_Speed / 7
        aura_table.parry_Range = math.max(math.max(ping, 4) + ball_Speed / 3.5, 9.5)
        aura_table.is_Spamming = aura_table.hit_Count > 1 or ball_Distance < 13.5

        if ball_Dot < 0 then
            aura_table.ball_Warping = tick()
        end

        task.spawn(function()
            if (tick() - aura_table.ball_Warping) >= 0.25 + target_distance_Limited - ball_speed_Limited or ball_Distance <= 12 then
                aura_table.is_ball_Warping = false

                return
            end

            aura_table.is_ball_Warping = true
        end)

        if ball_Distance <= aura_table.parry_Range and not aura_table.is_Spamming and not aura_table.is_ball_Warping then
            parry_remote:FireServer(
                0.5,
                CFrame.new(camera.CFrame.Position, Vector3.new(math.random(-1000, 1000), math.random(0, 1000), math.random(-1000, 100))),
                {[closest_Entity.Name] = target_Position},
                {target_Position.X, target_Position.Y},
                false
            )

            aura_table.canParry = false
            aura_table.hit_Time = tick()
            aura_table.hit_Count += 1

            task.delay(0.15, function()
                aura_table.hit_Count -= 1
            end)
        end

        task.spawn(function()
            repeat
                RunService.PreRender:Wait()
            until (tick() - aura_table.hit_Time) >= 1
                aura_table.canParry = true
        end)
    end)
end)


initializate('nurysium_temp')

--// Manual Spam
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local hitremote
for i,v in next, game:GetDescendants() do
    if v and v.Name:find("\n") and v:IsA("RemoteEvent") then
        hitremote = v
        break
    end
end

local cframes = {
    CFrame.new(-Random.new():NextNumber(200, 500), Random.new():NextNumber(0, 40), -Random.new():NextNumber(70, 120)),
    CFrame.new(-Random.new():NextNumber(200, 500), Random.new():NextNumber(0, 40), -Random.new():NextNumber(70, 120)),
    CFrame.new(-Random.new():NextNumber(200, 500), Random.new():NextNumber(0, 80), -Random.new():NextNumber(70, 120)),
    CFrame.new(-Random.new():NextNumber(200, 600), Random.new():NextNumber(0, 80), -Random.new():NextNumber(70, 120))
}

local function getcloseplr()
    local plr
    local dista = math.huge
    for i,v in next, Players:GetPlayers() do
        if v and v ~= LocalPlayer and v.Character and v.Character:IsDescendantOf(game:GetService("Workspace"):FindFirstChild("Alive")) and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChildOfClass("Humanoid").Health > 0 and v.Character.PrimaryPart then
            local dist = LocalPlayer:DistanceFromCharacter(v.Character.PrimaryPart.Position)
            if dist < dista then
                dista = dist
                plr = v
            end
        end
    end
    return plr
end

local function getplrs()
    local plrss = {}
    for i,v in next, Players:GetPlayers() do
        if v and v.Character and v.Character:IsDescendantOf(game:GetService("Workspace"):FindFirstChild("Alive")) then
            plrss[v.Name] = v.Character.PrimaryPart.Position + Vector3.new(10, 10, 10)
        end
    end
    return plrss
end

local gui = Instance.new("ScreenGui")
gui.ResetOnSpawn = false
gui.Parent = CoreGui

local frame = Instance.new("Frame")
frame.Position = UDim2.new(0, 40, 0, 20)
frame.Size = UDim2.new(0, 100, 0, 50)
frame.BackgroundColor3 = Color3.new(0, 0, 0)
frame.BorderSizePixel = 0
frame.Name = "Clash Mode"
frame.Parent = gui

local button = Instance.new("TextButton")
button.Text = "Spam Mode"
button.Size = UDim2.new(1, -4, 1, -7)
button.Position = UDim2.new(0, 3, 0, 5)
button.BackgroundColor3 = Color3.new(0, 0, 0)
button.BackgroundTransparency = 0.5
button.BorderColor3 = Color3.new(0, 0, 0)
button.BorderSizePixel = 2
button.Font = Enum.Font.SourceSans
button.TextColor3 = Color3.new(1, 1, 1)
button.TextSize = 22
button.Parent = frame

local activated = false
local heartbeatConnection
local manualspamspeed = 55
local manspamcons = {}
local enabled = false
local debounce = false

frame.BackgroundTransparency = 0.85

local function deactivateClashMode()
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
        heartbeatConnection = nil
    end

    for i,v in next, manspamcons do
        v:Disconnect()
    end
    table.clear(manspamcons)
    enabled = false

    button.Text = "OFF"
    button.TextColor3 = Color3.new(1, 0, 0)
end

local function activateClashMode()
    local function fireHitRemote()
        if debounce then return end
        debounce = true
        delay(0.01, function() debounce = false end)
        
        for i = 1, manualspamspeed do
            if not enabled then break end
            local args = {
                [1] = 0.5,
                [2] = cframes[math.random(1, #cframes)],
                [3] = getcloseplr() and {[tostring(getcloseplr().Name)] = getcloseplr().Character.PrimaryPart.Position} or getplrs(),
                [4] = {
                    [1] = math.random(200, 500),
                    [2] = math.random(100, 200)
                },
                [5] = false
            }
            hitremote:FireServer(unpack(args))
        end
    end

    heartbeatConnection = RunService.Heartbeat:Connect(function()
        if enabled then
            fireHitRemote()
        end
    end)

    table.insert(manspamcons, RunService.PreRender:Connect(function()
        if enabled then
            fireHitRemote()
        end
    end))

    enabled = true

    button.Text = "ON"
    button.TextColor3 = Color3.new(0, 1, 0)
end

local function toggleClashMode()
    activated = not activated

    if activated then
        activateClashMode()
    else
        deactivateClashMode()
    end
end

button.MouseButton1Click:Connect(toggleClashMode)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.E then
        toggleClashMode()
    end
end)

library:create_toggle("Manual Spam", "Combat", function(state)
  if state then
            gui.Enabled = true
            if activated then
                activateClashMode()
            else
                deactivateClashMode()
            end
        else
            deactivateClashMode()
            gui.Enabled = false
  end
end)

getgenv().ViewParryArea = false
getgenv().ParryRange = 10
local maxRange = 25

local Stats = game:GetService('Stats')
local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')

local local_player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local closest_Entity = nil
local connection

local function get_closest_entity_in_camera_direction()
    local closest
    local max_distance = math.huge
    local camera_direction = camera.CFrame.LookVector

    for _, entity in workspace.Alive:GetChildren() do
        if entity.Name ~= Players.LocalPlayer.Name then
            local direction_to_entity = (entity.HumanoidRootPart.Position - camera.CFrame.Position).Unit
            local angle = math.acos(camera_direction:Dot(direction_to_entity))

            if angle < math.rad(30) then
                local distance = (camera.CFrame.Position - entity.HumanoidRootPart.Position).Magnitude
                if distance < max_distance then
                    closest_Entity = entity
                    max_distance = distance
                end
            end
        end
    end
end

local function ViewParryArea()
    local BallParry = Instance.new("Part", workspace)
    BallParry.Name = "Parry Range"
    BallParry.Material = Enum.Material.ForceField
    BallParry.CastShadow = false
    BallParry.CanCollide = false
    BallParry.Anchored = true
    BallParry.BrickColor = BrickColor.new("Bright blue")
    BallParry.Shape = Enum.PartType.Ball

    local PartFind = workspace:FindFirstChild(BallParry.Name)
    if PartFind and PartFind ~= BallParry then
        PartFind:Destroy()
    end

    local Players = game:GetService("Players")
    local Player = Players.LocalPlayer

    local isExpanding = false
    local Range = getgenv().ParryRange
    local initialRange = getgenv().ParryRange

    connection = RunService.Heartbeat:Connect(function()
        if not getgenv().ViewParryArea then
            connection:Disconnect()
            BallParry:Destroy()
            return
        end

        local plrChar = Player.Character
        local plrPP = plrChar and plrChar:FindFirstChild("HumanoidRootPart")

        BallParry.BrickColor = BrickColor.new("Bright blue")

        if plrPP then
            BallParry.Position = plrPP.Position
        else
            BallParry.Position = Vector3.new(1000, 1000, 1000)
        end

        local self = Nurysium_Util.getBall()
        if self then
            local ball_Velocity = self.AssemblyLinearVelocity

            if self:FindFirstChild('zoomies') then
                ball_Velocity = self.zoomies.VectorVelocity
            end

            local ball_Position = self.Position
            local ball_Direction = (ball_Position - plrPP.Position).Unit
            local ball_Speed = ball_Velocity.Magnitude
            local ball_Dot = ball_Direction:Dot(ball_Velocity.Unit)

            local ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue() / 10
            local max_parry_Range = math.max(math.max(ping, 4) + ball_Speed / 1.5, maxRange)

            if ball_Dot < 0 then
                if not isExpanding then
                    Range = initialRange
                    isExpanding = true
                end
                Range = math.min(Range + ball_Speed / 5, max_parry_Range)
            else
                if isExpanding then
                    Range = getgenv().ParryRange
                    isExpanding = false
                end
            end

            BallParry.Size = Vector3.new(Range, Range, Range)
        end
    end)
end

library:create_toggle("Visualiser", "Combat", function(toggled)
  getgenv().ViewParryArea = toggled
        if toggled then
            ViewParryArea()
        elseif connection then
            connection:Disconnect()
            local existingPart = workspace:FindFirstChild("Parry Range <Alexis.isback00 or Pitbull>")
            if existingPart then
                existingPart:Destroy()
            end
        end
end)

local player = game.Players.LocalPlayer
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))

-- Prevent the GUI from resetting on respawn
screenGui.ResetOnSpawn = false

local textLabel = Instance.new("TextLabel")

-- Setting up the text label
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.BackgroundTransparency = 1
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.TextStrokeTransparency = 0.8
textLabel.Font = Enum.Font.SourceSansBold
textLabel.TextSize = 15
textLabel.Parent = screenGui

-- Position based on device type
if UIS.TouchEnabled then
    textLabel.Position = UDim2.new(1, -260, 0, 40) -- Mobile positioning
else
    textLabel.Position = UDim2.new(1, -220, 0, 10) -- PC positioning
end

-- Function to update the text label with stats
local function updateStats()
    local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    local fps = math.floor(1 / RunService.Heartbeat:Wait())
    local cvs = game:GetService("Stats").Workspace.Heartbeat:GetValue() * 100

    textLabel.Text = string.format("Ping: %sms | CVS: %.2f%% | FPS: %d", ping, cvs, fps)
end

-- Setting up the toggleable GUI
library:create_toggle("View Ping and FPS", "Misc", function(state)
    if state then
        screenGui.Enabled = true
        -- Continuously update the stats
        RunService.Heartbeat:Connect(updateStats)
    else
        screenGui.Enabled = false
    end
end)

-- Initially disable the GUI
screenGui.Enabled = false